@page "/nha-cung-cap"
@using BlazorServerApp.Models
@using Microsoft.EntityFrameworkCore
@inject BlazorServerApp.Data.AppDbContext _context
@inject IJSRuntime JS


<div class="container-fluid p-4">
    <h3 class="mb-4">Quản Lý Nhà Cung Cấp</h3>
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-primary text-light">
                    <h5 class="mb-0">@((isEdit) ? "Cập nhật nhà cung cấp" : "Thêm nhà cung cấp")</h5>
                </div>
                <div class="card-body">
                    <EditForm Model="@formModel" OnValidSubmit="Save">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }

                        <div class="row g-3">
                            <div class="col-md-4">
                                <label class="form-label fw-bold">Mã nhà cung cấp</label>
                                <InputText @bind-Value="formModel.MaNhaCungCap" class="form-control" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label fw-bold">Tên nhà cung cấp</label>
                                <InputText @bind-Value="formModel.TenNhaCungCap" class="form-control" />
                            </div>
                            <div class="col-md-8">
                                <label class="form-label fw-bold">Ghi chú</label>
                                <InputText @bind-Value="formModel.GhiChu" class="form-control" />
                            </div>
                        </div>

                        <div class="mt-3">
                            <button type="submit" class="btn btn-primary">
                                @((isEdit) ? "Cập nhật" : "Thêm mới")
                            </button>
                            @if (isEdit)
                            {
                                <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">
                                    Hủy
                                </button>
                            }
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body p-0">
                    <table class="table table-hover table-striped mb-0">
                        <thead class="table-primary">
                            <tr>
                                <th>Mã nhà cung cấp</th>
                                <th>Tên nhà cung cấp</th>
                                <th>Ghi chú</th>
                                <th class="text-center" style="width:140px;">Hành động</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var nhaCungCap in nhaCungCaps)
                            {
                                <tr>
                                    <td>@nhaCungCap.MaNhaCungCap</td>
                                    <td>@nhaCungCap.TenNhaCungCap</td>
                                    <td>@nhaCungCap.GhiChu</td>
                                    <td class="text-center">
                                        <a href="javascript:void(0)" class="text-warning me-2" title="Sửa" @onclick="() => Edit(nhaCungCap)">
                                            <i class="bi bi-pencil-square fs-5"></i>
                                        </a>
                                        <a href="javascript:void(0)" class="text-danger" title="Xóa" @onclick="() => confirmDelete(nhaCungCap.Id)">
                                            <i class="bi bi-trash fs-5"></i>
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    private List<NhaCungCap> nhaCungCaps = new();
    private NhaCungCap formModel = new();
    private bool isEdit = false;
    private string? errorMessage;

    // Ham khoi tao khi load component
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    // Load danh sach san pham tu database
    private async Task LoadData()
    {
        nhaCungCaps = await _context.NhaCungCaps
            .OrderBy(n => n.TenNhaCungCap)
            .ToListAsync();
    }

    private async Task Save()
    {
        errorMessage = null;

        formModel.MaNhaCungCap = formModel.MaNhaCungCap?.Trim();
        formModel.TenNhaCungCap = formModel.TenNhaCungCap?.Trim();

        if (string.IsNullOrWhiteSpace(formModel.MaNhaCungCap))
        {
            errorMessage = "Mã nhà cung cấp không được để trống.";
            return;
        }
        await LoadData();

        if (string.IsNullOrWhiteSpace(formModel.TenNhaCungCap))
        {
            errorMessage = "Tên nhà cung cấp không được để trống";
            return;
        }

        bool isMaNhaCungCapTrung = isEdit
            ? _context.NhaCungCaps.Any(n => n.MaNhaCungCap == formModel.MaNhaCungCap && n.Id != formModel.Id)
            : _context.NhaCungCaps.Any(n => n.MaNhaCungCap == formModel.MaNhaCungCap);

        bool isTenNhaCungCapTrung = isEdit
            ? _context.NhaCungCaps.Any(n => n.TenNhaCungCap == formModel.TenNhaCungCap && n.Id != formModel.Id)
            : _context.NhaCungCaps.Any(n => n.TenNhaCungCap == formModel.TenNhaCungCap);

        if (isMaNhaCungCapTrung)
        {
            errorMessage = "Mã nhà cung cấp đã tồn tại!";
            return;
        }

        if (isTenNhaCungCapTrung)
        {
            errorMessage = "Tên nhà cung cấp đã tồn tại!";
            return;
        }

        if (isEdit)
        {
            // Neu dang sua, tim id de cap nhat
            var nhaCungCap = await _context.NhaCungCaps.FindAsync(formModel.Id);
            if (nhaCungCap != null)
            {
                nhaCungCap.MaNhaCungCap = formModel.MaNhaCungCap;
                nhaCungCap.TenNhaCungCap = formModel.TenNhaCungCap;
                nhaCungCap.GhiChu = formModel.GhiChu;
            }
        }
        else
        {
            // Neu them moi
            _context.NhaCungCaps.Add(formModel);
        }
        // Luu thay doi xuong database
        await _context.SaveChangesAsync();

        formModel = new NhaCungCap();
        isEdit = false;

        // Load lai danh sach sau khi cap nhat
        await LoadData();

    }

    // Gan du lieu vao form de sua
    private void Edit(NhaCungCap nhaCungCap)
    {
        formModel = new NhaCungCap
        {
            Id = nhaCungCap.Id,
            MaNhaCungCap = nhaCungCap.MaNhaCungCap,
            TenNhaCungCap = nhaCungCap.TenNhaCungCap,
            GhiChu = nhaCungCap.GhiChu

        };
        isEdit = true;
        errorMessage = null;

    }

    // Huy chinh sua va reset form
    private void CancelEdit()
    {
        formModel = new NhaCungCap();
        isEdit = false;
        errorMessage = null;
    }

    // Xoa
    private async Task Delete(int id)
    {
        var isPhieuNhapUsed = await _context.PhieuNhaps.AnyAsync(p => p.NhaCungCapId == id);

        var isXnkPhieuNhapUsed = await _context.XnkPhieuNhaps.AnyAsync(p => p.NhaCungCapId == id);

        if (isPhieuNhapUsed)
        {
            errorMessage = "Không thể xóa vì nhà cung cấp này được sử dụng bới phiếu nhập";
            return;
        }

        if (isXnkPhieuNhapUsed)
        {
            errorMessage = "Không thể xóa vì nhà cung cấp này được sử dụng bới phiếu nhập đã hiệu chỉnh";
            return;
        }

        var nhaCungCap = await _context.NhaCungCaps.FindAsync(id);
        if (nhaCungCap != null)
        {
            _context.NhaCungCaps.Remove(nhaCungCap);
            await _context.SaveChangesAsync();
            await LoadData();
        }

    }

    private async Task confirmDelete(int id)
    {
        if (await JS.InvokeAsync<bool>("confirm", "Bạn có chắc muốn xóa"))
        {
            await Delete(id);
        }
    }

}
